@page "/counter"
@using Microsoft.EntityFrameworkCore
@using Olimp.Data
@using System.Collections.Immutable
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory;
@inject NavigationManager NavigationManager;


<label class="control-label">Участник</label>
<select class="form-select"
        @bind="ParticipantId"
        disabled="@IsEdit">
    @foreach (var p in Participants)
    {
        if (p.Id == ParticipantId)
        {
            <option value="@p.Id" selected>(@p.Number) @p.FirstName @p.LastName @p.SurName</option>
        }
        else
        {
            <option value="@p.Id">(@p.Number) @p.FirstName @p.LastName @p.SurName</option>
        }
    }
</select>

@foreach (var step in StepResults)
{
    <div>
        <label class="control-label">@step.StepName</label>
        <input type="number" step=".01" inputmode="decimal"
               class="form-control"
               @bind="step.Result"/>
    </div>
}

<button class="btn btn-primary"
        @onclick="Submit">Применить</button>

@code {
    private List<Participant> Participants;
    private IEnumerable<ResultContainer> StepResults;

    [Parameter] public Guid? ParticipantId { get; set; }
    public bool IsEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsEdit = ParticipantId is not null;
        
        var year = DateTime.UtcNow.Year;
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var participantQuery = dbContext.Participants
            .Where(participant => participant.CreationDate.Year == year)
            .Where(participant => participant.Number != null);
        if (!IsEdit)
        {
            participantQuery = participantQuery.Where(participant => participant.Results.Count == 0);
        }

        Participants = await participantQuery.ToListAsync();

        ParticipantId ??= Participants.FirstOrDefault()?.Id;

        var currentOlimp = await dbContext.Olimps
            .Include(olimp => olimp.Steps)
            .ThenInclude(step => step.Results.Where(result => result.ParticipantId == ParticipantId))
            .FirstOrDefaultAsync(olimp => olimp.Year == year);

        if (currentOlimp is null)
        {
            throw new Exception("No olimp!");
        }

        StepResults = currentOlimp.Steps.Select(step => new ResultContainer
        {
            StepId = step.Id,
            StepName = step.Name,
            Result = step.Results.FirstOrDefault()?.Score
        }).ToImmutableList();

        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        if (ParticipantId == default)
        {
            return;
        }

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var existingResults = await dbContext.Results
            .Where(result => result.ParticipantId == ParticipantId)
            .ToListAsync();

        dbContext.Results.RemoveRange(existingResults);

        foreach (var container in StepResults.Where(x => x.Result is not null))
        {
            dbContext.Results.Add(new Result() { StepId = container.StepId, ParticipantId = ParticipantId.Value, Score = container.Result!.Value });
        }

        await dbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/Results", true);
    }

    private class ResultContainer
    {
        public required Guid StepId { get; init; }
        public required string StepName { get; init; }
        public decimal? Result { get; set; }
    }

}